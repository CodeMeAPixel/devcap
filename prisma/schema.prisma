generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String         @id @default(uuid())
  email          String         @unique
  name           String?
  password       String?        // Hashed password for email/password auth
  image          String?        // Profile image URL
  emailVerified  DateTime?      // For email verification
  isAdmin        Boolean        @default(false) // Admin flag for admin dashboard access
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  userProgress   UserProgress?
  ownedBusinesses UserBusiness[]
  ownedUpgrades  UserUpgrade[]
  hiredTeams     UserTeam[]
  achievements   UserAchievement[]
  accounts       Account[]
  sessions       Session[]
  gameStats      GameStats?

  @@index([email])
  @@index([isAdmin])
  @@index([createdAt])
}

model Account {
  id                 String   @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expires])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@index([expires])
}

model Business {
  id               String         @id @default(uuid())
  name             String
  description      String
  baseCost         Int
  baseProduction   Int
  costMultiplier   Float          @default(1.15)
  unlockRequirement Int           @default(0)
  imageUrl         String?        // URL for business image
  iconUrl          String?        // URL for business icon
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  userBusinesses   UserBusiness[]
  
  @@index([unlockRequirement])
  @@index([name])
}

model UserBusiness {
  id                 String   @id @default(uuid())
  userId             String
  businessId         String
  level              Int      @default(1)
  assignedManagers   Int      @default(0)  // Number of team members assigned to this business
  lastCollected      DateTime @default(now()) // Last time income was collected
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  business           Business @relation(fields: [businessId], references: [id], onDelete: Cascade)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  @@unique([userId, businessId])
  @@index([level])
  @@index([lastCollected])
}

model TeamMember {
  id               String      @id @default(uuid())
  name             String
  description      String
  baseCost         Int
  baseProduction   Int
  costMultiplier   Float       @default(1.15)
  unlockRequirement Int        @default(0)
  imageUrl         String?     // URL for team member image
  iconUrl          String?     // URL for team member icon
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  userTeams        UserTeam[]
  
  @@index([unlockRequirement])
  @@index([name])
  @@index([baseCost])
}

model UserTeam {
  id              String     @id @default(uuid())
  userId          String
  teamMemberId    String
  count           Int        @default(0)
  availableCount  Int        @default(0)  // Number of team members available to assign
  user            User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  teamMember      TeamMember @relation(fields: [teamMemberId], references: [id], onDelete: Cascade)
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt

  @@unique([userId, teamMemberId])
  @@index([count, availableCount])
}

model Upgrade {
  id               String        @id @default(uuid())
  name             String
  description      String
  cost             Int
  type             String        // business, team, click, etc.
  multiplier       Float
  targetId         String?       // ID of the target (business or team) if applicable
  unlockRequirement Int          @default(0)
  imageUrl         String?       // URL for upgrade image
  iconUrl          String?       // URL for upgrade icon
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  userUpgrades     UserUpgrade[]
  
  @@index([unlockRequirement])
  @@index([type, targetId])
  @@index([cost])
}

model UserUpgrade {
  id        String   @id @default(uuid())
  userId    String
  upgradeId String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  upgrade   Upgrade  @relation(fields: [upgradeId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, upgradeId])
  @@index([createdAt])
}

model Achievement {
  id               String            @id @default(uuid())
  name             String
  description      String
  requirement      Int
  type             String            // loC, business, team, etc.
  reward           Int               @default(0)
  imageUrl         String?           // URL for achievement image
  iconUrl          String?           // URL for achievement icon
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  userAchievements UserAchievement[]

  @@index([type, requirement])
  @@index([reward])
}

model UserAchievement {
  id            String      @id @default(uuid())
  userId        String
  achievementId String
  unlockedAt    DateTime    @default(now())
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@unique([userId, achievementId])
  @@index([unlockedAt])
}

model UserProgress {
  id             String   @id @default(uuid())
  userId         String   @unique
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  linesOfCode    Int      @default(0)
  currency       Int      @default(0)
  totalEarned    Int      @default(0)
  clickPower     Int      @default(1)
  lastActive     DateTime @default(now())
  offlineBonus   Float    @default(0.5)  // % of regular production earned while offline
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  @@index([lastActive])
  @@index([currency, totalEarned])
}

model GameStats {
  id                String   @id @default(uuid())
  userId            String   @unique
  totalBusinesses   Int      @default(0)
  totalTeamMembers  Int      @default(0)
  totalUpgrades     Int      @default(0)
  totalAchievements Int      @default(0)
  highestLoC        Int      @default(0)
  productionRate    Int      @default(0)
  lastUpdated       DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([highestLoC, productionRate])
  @@index([lastUpdated])
}

model GameEvent {
  id          String   @id @default(uuid())
  userId      String
  eventType   String   // purchase, upgrade, achievement, etc.
  eventData   Json     // Flexible JSON data structure for event details
  timestamp   DateTime @default(now())
  
  @@index([userId])
  @@index([eventType])
  @@index([timestamp])
}

model DatabaseMigration {
  id          String   @id @default(uuid())
  version     String   @unique
  description String
  appliedAt   DateTime @default(now())
  
  @@index([appliedAt])
}
